// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  lobbies  Lobby[]
  members  Member[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Application Models
model Lobby {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Owner of the lobby
  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  members  Member[]
  expenses Expense[]
  deposits Deposit[]

  @@map("lobbies")
}

model Member {
  id                 String  @id @default(cuid())
  name               String
  isLeader           Boolean @default(false)
  initialDeposit     Float   @default(0)
  additionalDeposits Float   @default(0)
  individualExpenses Float   @default(0)

  lobbyId String
  lobby   Lobby  @relation(fields: [lobbyId], references: [id], onDelete: Cascade)

  // Optional: Link to user account if member is a registered user
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  deposits               Deposit[]
  expenseIndividualItems ExpenseIndividual[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("members")
}

model Expense {
  id              String      @id @default(cuid())
  type            ExpenseType
  description     String
  totalAmount     Float
  perPersonAmount Float?
  timestamp       DateTime    @default(now())

  lobbyId String
  lobby   Lobby  @relation(fields: [lobbyId], references: [id], onDelete: Cascade)

  individualExpenses ExpenseIndividual[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("expenses")
}

model ExpenseIndividual {
  id     String @id @default(cuid())
  amount Float

  expenseId String
  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([expenseId, memberId])
  @@map("expense_individuals")
}

model Deposit {
  id          String      @id @default(cuid())
  amount      Float
  type        DepositType
  description String?
  timestamp   DateTime    @default(now())

  lobbyId String
  lobby   Lobby  @relation(fields: [lobbyId], references: [id], onDelete: Cascade)

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("deposits")
}

enum ExpenseType {
  GROUP
  INDIVIDUAL
}

enum DepositType {
  INITIAL
  ADDITIONAL
}
